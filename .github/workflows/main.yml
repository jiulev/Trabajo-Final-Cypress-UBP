name: Cypress Tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # 🔧 FIX CI: crear archivos con la capitalización que exige el bundler.
      # - Si existen con otra may/min, los copiamos.
      # - Si NO existen, generamos stubs mínimos (no afectan tus tests).
      - name: Make Linux case-safe (create copies or stubs)
        shell: bash
        run: |
          set -e

          # --- services/Login(.js) ---
          mkdir -p cypress/services
          # si existe login.js y no Login.js -> copiar
          if [ -f cypress/services/login.js ] && [ ! -f cypress/services/Login.js ]; then
            cp cypress/services/login.js cypress/services/Login.js
          fi
          # si existe Login.js y no login.js -> copiar
          if [ -f cypress/services/Login.js ] && [ ! -f cypress/services/login.js ]; then
            cp cypress/services/Login.js cypress/services/login.js
          fi
          # si no existe ninguno -> stub
          if [ ! -f cypress/services/login.js ] && [ ! -f cypress/services/Login.js ]; then
            cat > cypress/services/Login.js <<'EOF'
            // STUB creado en CI: evita fallos de bundling por case-sensitive.
            const Login = {
              // agrega métodos si más adelante hicieran falta; no se usan en los specs ejecutados
            };
            export default Login;
            EOF
            cp cypress/services/Login.js cypress/services/login.js
          fi

          # --- pages/practicetestautomation/LoginPage(.js) y SuccessPage(.js) ---
          mkdir -p cypress/pages/practicetestautomation

          make_stub_page () {
            local name="$1"
            local path="cypress/pages/practicetestautomation/${name}.js"
            if [ ! -f "$path" ]; then
              cat > "$path" <<'EOF'
              // STUB de PageObject creado en CI. No se usa en los specs seleccionados.
              export default class PageStub {
                constructor(){ }
              }
              EOF
            fi
          }

          # Si hay variantes con otra capitalización, copiamos a la forma exacta que importan los steps
          for base in LoginPage SuccessPage; do
            # buscar variantes comunes
            for v in loginPage Loginpage LOGINPAGE successPage Successpage SUCCESSPAGE; do
              if [ -f "cypress/pages/practicetestautomation/${v}.js" ] && [ ! -f "cypress/pages/practicetestautomation/${base}.js" ]; then
                cp "cypress/pages/practicetestautomation/${v}.js" "cypress/pages/practicetestautomation/${base}.js"
              fi
            done
            make_stub_page "$base"
          done

          echo "CI case-safe setup done."

      # ▶️ Ejecutamos SOLO tus 3 features (las rutas exactas que pediste)
      - name: Run Cypress (only selected specs)
        uses: cypress-io/github-action@v6
        with:
          command: >
            npx cypress run
            -e ENV=DEV
            --spec "cypress/journeys/features/e2e/bookstore_login.feature,
                    cypress/journeys/features/e2e/lambdatest_input_form.feature,
                    cypress/journeys/features/api/petstore-julieta/petstore_api.feature"

      # 📎 Subimos evidencias siempre
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress/screenshots
            cypress/videos
            jsonlogs
            reports
